// Code generated by goctl. DO NOT EDIT!

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	umsAdminUserFieldNames          = builder.RawFieldNames(&UmsAdminUser{})
	umsAdminUserRows                = strings.Join(umsAdminUserFieldNames, ",")
	umsAdminUserRowsExpectAutoSet   = strings.Join(stringx.Remove(umsAdminUserFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	umsAdminUserRowsWithPlaceHolder = strings.Join(stringx.Remove(umsAdminUserFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheUmsAdminUserIdPrefix       = "cache:umsAdminUser:id:"
	cacheUmsAdminUserNicknamePrefix = "cache:umsAdminUser:nickname:"
)

type (
	umsAdminUserDao interface {
		Insert(ctx context.Context, data *UmsAdminUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UmsAdminUser, error)
		FindOneByNickname(ctx context.Context, nickname string) (*UmsAdminUser, error)
		Update(ctx context.Context, data *UmsAdminUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUmsAdminUserDao struct {
		sqlc.CachedConn
		table string
	}

	UmsAdminUser struct {
		Id         int64          `db:"id"`
		Nickname   string         `db:"nickname"`    // 昵称
		Avatar     sql.NullString `db:"avatar"`      // 头像
		Password   string         `db:"password"`    // 密码(加密后)
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 创建时间
	}
)

func newUmsAdminUserDao(conn sqlx.SqlConn, c cache.CacheConf) *defaultUmsAdminUserDao {
	return &defaultUmsAdminUserDao{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`ums_admin_user`",
	}
}

func (m *defaultUmsAdminUserDao) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	umsAdminUserIdKey := fmt.Sprintf("%s%v", cacheUmsAdminUserIdPrefix, id)
	umsAdminUserNicknameKey := fmt.Sprintf("%s%v", cacheUmsAdminUserNicknamePrefix, data.Nickname)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, umsAdminUserIdKey, umsAdminUserNicknameKey)
	return err
}

func (m *defaultUmsAdminUserDao) FindOne(ctx context.Context, id int64) (*UmsAdminUser, error) {
	umsAdminUserIdKey := fmt.Sprintf("%s%v", cacheUmsAdminUserIdPrefix, id)
	var resp UmsAdminUser
	err := m.QueryRowCtx(ctx, &resp, umsAdminUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsAdminUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsAdminUserDao) FindOneByNickname(ctx context.Context, nickname string) (*UmsAdminUser, error) {
	umsAdminUserNicknameKey := fmt.Sprintf("%s%v", cacheUmsAdminUserNicknamePrefix, nickname)
	var resp UmsAdminUser
	err := m.QueryRowIndexCtx(ctx, &resp, umsAdminUserNicknameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `nickname` = ? limit 1", umsAdminUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, nickname); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsAdminUserDao) Insert(ctx context.Context, data *UmsAdminUser) (sql.Result, error) {
	umsAdminUserIdKey := fmt.Sprintf("%s%v", cacheUmsAdminUserIdPrefix, data.Id)
	umsAdminUserNicknameKey := fmt.Sprintf("%s%v", cacheUmsAdminUserNicknamePrefix, data.Nickname)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, umsAdminUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Nickname, data.Avatar, data.Password)
	}, umsAdminUserIdKey, umsAdminUserNicknameKey)
	return ret, err
}

func (m *defaultUmsAdminUserDao) Update(ctx context.Context, newData *UmsAdminUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	umsAdminUserIdKey := fmt.Sprintf("%s%v", cacheUmsAdminUserIdPrefix, data.Id)
	umsAdminUserNicknameKey := fmt.Sprintf("%s%v", cacheUmsAdminUserNicknamePrefix, data.Nickname)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, umsAdminUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Nickname, newData.Avatar, newData.Password, newData.Id)
	}, umsAdminUserIdKey, umsAdminUserNicknameKey)
	return err
}

func (m *defaultUmsAdminUserDao) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUmsAdminUserIdPrefix, primary)
}

func (m *defaultUmsAdminUserDao) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", umsAdminUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUmsAdminUserDao) tableName() string {
	return m.table
}
