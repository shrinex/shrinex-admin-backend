// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ums.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UmsClient is the client API for Ums service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UmsClient interface {
	SignUp(ctx context.Context, in *SignUpInput, opts ...grpc.CallOption) (*SignUpOutput, error)
}

type umsClient struct {
	cc grpc.ClientConnInterface
}

func NewUmsClient(cc grpc.ClientConnInterface) UmsClient {
	return &umsClient{cc}
}

func (c *umsClient) SignUp(ctx context.Context, in *SignUpInput, opts ...grpc.CallOption) (*SignUpOutput, error) {
	out := new(SignUpOutput)
	err := c.cc.Invoke(ctx, "/pb.ums/signUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UmsServer is the server API for Ums service.
// All implementations must embed UnimplementedUmsServer
// for forward compatibility
type UmsServer interface {
	SignUp(context.Context, *SignUpInput) (*SignUpOutput, error)
	mustEmbedUnimplementedUmsServer()
}

// UnimplementedUmsServer must be embedded to have forward compatible implementations.
type UnimplementedUmsServer struct {
}

func (UnimplementedUmsServer) SignUp(context.Context, *SignUpInput) (*SignUpOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedUmsServer) mustEmbedUnimplementedUmsServer() {}

// UnsafeUmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UmsServer will
// result in compilation errors.
type UnsafeUmsServer interface {
	mustEmbedUnimplementedUmsServer()
}

func RegisterUmsServer(s grpc.ServiceRegistrar, srv UmsServer) {
	s.RegisterService(&Ums_ServiceDesc, srv)
}

func _Ums_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UmsServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ums/signUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UmsServer).SignUp(ctx, req.(*SignUpInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Ums_ServiceDesc is the grpc.ServiceDesc for Ums service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ums_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ums",
	HandlerType: (*UmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "signUp",
			Handler:    _Ums_SignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ums.proto",
}
